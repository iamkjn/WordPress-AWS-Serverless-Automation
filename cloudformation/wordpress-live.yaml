AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to deploy a live (production) WordPress instance.

Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: AWS::EC2::KeyPair::KeyName
  MyIpAddress:
    Description: Your public IP address range (e.g., 203.0.113.0/32) to allow SSH and HTTP/HTTPS access.
    Type: String
    # Default: "0.0.0.0/0" # Consider restricting this to your actual IP for SSH for better security

Mappings:
  # Using current AMI IDs for Amazon Linux 2 (HVM), SSD Volume Type
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-053b01d02c611488c # Amazon Linux 2 AMI 2.0.20250428.0 (HVM), SSD Volume Type
    eu-west-2:
      HVM64: ami-0a6dd24b17a1029c1 # Amazon Linux 2 AMI 2.0.20250412.0 (HVM), SSD Volume Type
    # Add more regions as needed. Always use the latest Amazon Linux 2 AMI for your region.

Resources:
  WordPressLiveInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: WordPressLiveInstanceRole

  WordPressLiveInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  WordPressLiveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP, HTTPS, and SSH access for the live WordPress instance.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIpAddress
      Tags:
        - Key: Name
          Value: WordPressLiveSG

  WordPressLiveInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref WordPressLiveSecurityGroup
      IamInstanceProfile: !Ref WordPressLiveInstanceProfile
      Tags:
        - Key: Name
          Value: WordPressLiveInstance
        - Key: Environment
          Value: Production
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd php php-mysqlnd mariadb-server
          wget https://wordpress.org/latest.tar.gz -P /tmp
          tar -xzf /tmp/latest.tar.gz -C /tmp
          cp -r /tmp/wordpress/* /var/www/html/
          chown -R apache:apache /var/www/html
          chmod -R 755 /var/www/html
          echo "<VirtualHost *:80>" > /etc/httpd/conf.d/wordpress.conf
          echo "    DocumentRoot /var/www/html" >> /etc/httpd/conf.d/wordpress.conf
          echo "    <Directory /var/www/html>" >> /etc/httpd/conf.d/wordpress.conf
          echo "        AllowOverride All" >> /etc/httpd/conf.d/wordpress.conf
          echo "        Require all granted" >> /etc/httpd/conf.d/wordpress.conf
          echo "    </Directory>" >> /etc/httpd/conf.d/wordpress.conf
          echo "</VirtualHost>" >> /etc/httpd/conf.d/wordpress.conf
          systemctl start httpd
          systemctl enable httpd
          systemctl start mariadb
          systemctl enable mariadb
          mysql -u root -e "CREATE DATABASE wordpress_live;"
          mysql -u root -e "CREATE USER 'wp_live_user'@'localhost' IDENTIFIED BY 'your_strong_password_live';"
          mysql -u root -e "GRANT ALL PRIVILEGES ON wordpress_live.* TO 'wp_live_user'@'localhost';"
          mysql -u root -e "FLUSH PRIVILEGES;"
          cat << EOF > /var/www/html/wp-config.php
          <?php
          define('DB_NAME', 'wordpress_live');
          define('DB_USER', 'wp_live_user');
          define('DB_PASSWORD', 'your_strong_password_live');
          define('DB_HOST', 'localhost');
          define('DB_CHARSET', 'utf8');
          define('DB_COLLATE', '');
          define('AUTH_KEY',         '# Replace with a unique phrase from https://api.wordpress.org/secret-key/1.1/salt/');
          define('SECURE_AUTH_KEY',  '# Replace with a unique phrase from https://api.wordpress.org/secret-key/1.1/salt/');
          define('LOGGED_IN_KEY',    '# Replace with a unique phrase from https://api.wordpress.org/secret-key/1.1/salt/');
          define('NONCE_KEY',        '# Replace with a unique phrase from https://api.wordpress.org/secret-key/1.1/salt/');
          define('AUTH_SALT',        '# Replace with a unique phrase from https://api.wordpress.org/secret-key/1.1/salt/');
          define('SECURE_AUTH_SALT', '# Replace with a unique phrase from https://api.wordpress.org/secret-key/1.1/salt/');
          define('LOGGED_IN_SALT',   '# Replace with a unique phrase from https://api.wordpress.org/secret-key/1.1/salt/');
          define('NONCE_SALT',       '# Replace with a unique phrase from https://api.wordpress.org/secret-key/1.1/salt/');
          define('WP_DEBUG', false);
          if ( !defined('ABSPATH') )
              define('ABSPATH', dirname(__FILE__) . '/');
          require_once(ABSPATH . 'wp-settings.php');
          EOF

Outputs:
  WordPressLiveURL:
    Description: URL of the live WordPress instance.
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt WordPressLiveInstance.PublicIp
  LiveInstanceId:
    Description: The Instance ID of the Live WordPress EC2 instance.
    Value: !Ref WordPressLiveInstance